from interfaces.model import ModelInterface
from interfaces.config import Config
from interfaces.event_logger import EventLoggerInterface
from exceptions.custom_exceptions import CheckConfigsError, AskPromptError

from dynaconf.base import LazySettings
import vertexai
from vertexai.preview.generative_models import GenerativeModel, Part
from vertexai.preview.generative_models import Part
from google.api_core import exceptions


class Model(ModelInterface):
    """
    A class representing a generative model for processing images based on configured settings.

    Attributes:
        _config (LazySettings): The configuration settings for the model.
        _event_logger (EventLoggerInterface): An event logger for logging events.
        _model (None | GenerativeModel): The generative model instance.
        _response (None | str): The response generated by the model.

    Args:
        config (Config, optional): The configuration settings for the model. Defaults to None.
        event_logger (EventLoggerInterface): An event logger instance for logging events.
    """
    def __init__(self, config: Config, event_logger: EventLoggerInterface):
        """
        Initializes the Model with optional configuration settings.

        Args:
            config (Config): The configuration settings for the model.
            event_logger (EventLoggerInterface): An event logger instance for logging events.
        """
        self._config: LazySettings = config.get()
        self._event_logger = event_logger
        self._model: None or GenerativeModel = None
        self._response: None | str = None

    @property
    def response(self) -> str:
        """
        Getter method for accessing the response generated by the model.

        Returns:
            str: The generated response.
        """
        return self._response

    def _check_configs(self) -> 'Model':
        """
        Checks if the required configuration settings are present.

        Raises:
            ValueError: If any required configuration setting is missing.

        Returns:
            Model: The Model instance.
        """
        try:
            if (self._config.get("PROJECT_ID") is not None and
                    self._config.get("LOCATION") is not None and
                    self._config.get("MODEL_CONFS").get("TYPE") is not None and
                    self._config.get("MODEL_CONFS").get("PROMPT") is not None):
                return self
        except AttributeError as e:
            raise CheckConfigsError(f"An error occurred while checking the required configurations for {__name__}", e)
        raise CheckConfigsError(f"An error occurred while checking the required configurations for {__name__}")

    def _setup(self) -> 'Model':
        """
        Sets up the generative model with the configured project ID and location.

        Returns:
            Model: The Model instance.
        """
        vertexai.init(project=self._config.get("PROJECT_ID"),
                      location=self._config.get("LOCATION"))
        return self

    def build(self) -> 'Model':
        """
        Instantiates the generative model based on the configured settings.

        Returns:
            Model: The Model instance.
        """
        self._check_configs()._setup()
        self._model = GenerativeModel(self._config.get("MODEL_CONFS").get("TYPE"))
        return self

    def ask_prompt(self, img: Part) -> str:
        """
        Generates a response by asking the generative model based on the provided image and prompt.

        Args:
            img (JpegImageFile | PngImageFile): The input image for generating the response.

        Raises:
            ValueError: If there is an issue with the generative model or input data.

        Returns:
            str: The generated response text.
        """
        try:
            response = self._model.generate_content([img, self._config.get("MODEL_CONFS").get("PROMPT")])
            self._event_logger.info("Prompt successfully asked to model. Response from model received")
            return response.text
        except (exceptions.InvalidArgument, exceptions.NotFound) as e:
            raise AskPromptError("An error occurred while prompting to the model", e)
